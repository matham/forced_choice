#:kivy 1.8.1
#:import partial functools.partial
#:import Factory kivy.factory.Factory


<MainView>:
    orientation: 'vertical'
    ExperimentView
    Label:
        text: app.exception_value
        text_size: self.size


<ExperimentView@BoxLayout>:
    orientation: 'vertical'
    TextInput:
        text: app.exp_config_path
        on_text: app.exp_config_path = self.text
    BoxLayout:
        orientaion: 'horizontal'
        Button:
            text: 'Start'
            on_press: app.start_stage()
            disabled: app.app_state != 'clear'
        Button:
            text: 'Restart'
            on_press: app.start_stage(True)
            disabled: app.app_state != 'clear'
        ToggleButton:
            text: 'Pause'
            on_press:
                app.root_stage is not None and (app.root_stage.pause() if self.state == 'normal' else app.root_stage.unpause())
                app.app_state =  'running' if self.state == 'normal' else 'paused'
            disabled: app.app_state != 'running' and app.app_state != 'paused'
        Button:
            text: 'Stop'
            on_press:
                app.barst_stage.cancel_exceptions()
                app.root_stage is not None and app.root_stage.stop()
            disabled: app.app_state != 'running'
        Button:
            on_parent: app.animal_pause_btn = Factory.get('ButtonGate')(button=self)
            text: 'Next animal'


<RootStage>:
    name: 'Root_stage'
    completion_list: self.stages
    on_finished:
        if self.finished: barst.request_callback('stop_devices', lambda *l: setattr(app, 'app_state', 'clear'))
    InitBarstStage:
        id: barst
    MoaStage:
        name: 'rat_loop'
        repeat: -1
        GateStage:
            name: 'rat_wait'
            device: app.animal_pause_btn
            exit_state: True
        MoaStage:
            name: 'block'
            id: block
            repeat: barst.num_blocks
            on_started:
                if self.started and barst.pin_dev: barst.pin_dev.activate(self.__self__)
                print('start block', self.started)
            on_finished:
                if self.finished and barst.pin_dev: barst.pin_dev.deactivate(self.__self__)
                print('finish block', self.finished)
            MoaStage:
                name: 'trials'
                id: trial
                repeat: barst.num_trials[block.count]
                on_started:
                    if self.started and barst.pin_dev: barst.pin_dev.set_state(high=['pump'])
                    print('start trial', self.started)
                GateStage:
                    name: 'house_light_on'
                    device: barst.daq_out_dev
                    exit_state: True
                    on_started:
                        if self.started and barst.daq_out_dev: barst.daq_out_dev.set_state(high=['house_light'])
                        print('start house', self.started)
                    on_finished:
                        print('finished house', self.finished)
                    state_attr: 'house_light'
                GateStage:
                    name: 'nose_poke_wait'
                    device: barst.daq_in_dev
                    exit_state: True
                    state_attr: 'nose_beam'
                    on_started:
                        print('start nose break', self.started)
                    on_finished:
                        print('finished nose break', self.finished)
                GateStage:
                    name: 'odor_start'
                    device: barst.odor_dev
                    exit_state: True
                    on_started:
                        if self.started and barst.odor_dev: barst.odor_dev.set_state(high=['p0', barst.trial_odors[block.count][trial.count]])
                        print('start odor start', self.started)
                    on_finished:
                        print('finished odor start', self.finished)
                    state_attr: 'p1'
                GateStage:
                    name: 'wait_nose_poke_exit'
                    device: barst.daq_in_dev
                    exit_state: False
                    state_attr: 'nose_beam'
                    max_duration: barst.max_nose_poke[block.count]
                    on_finished: if self.finished and barst.odor_dev: barst.odor_dev.set_state(low=['p0', barst.trial_odors[block.count][trial.count]])
                GateStage:
                    name: 'decision_stage'
                    device: barst.daq_in_dev
                    exit_state: True
                    state_attr: 'reward_beam_r'
                    max_duration: barst.decision_duration[block.count]
                    on_finished: if self.finished and barst.daq_in_dev: barst.compute_reward(block.count, trial.count, barst.daq_in_dev.reward_beam_r)
                GateStage:
                    disabled: not barst.reward[block.count][trial.count]
                    name: 'reward_stage'
                    device: barst.pin_dev
                    state_attr: 'pump'
                    exit_state: True
                    hold_time: .1
                    on_finished: if self.finished and barst.pin_dev: barst.pin_dev.set_state(low=[self.state_attr])
                Delay:
                    name: 'iti'
                    delay: barst.iti[block.count][trial.count]
                    on_delay: print('delay', self.delay, barst.iti)
                    on_started: if self.started and barst.daq_out_dev: barst.daq_out_dev.set_state(low=['house_light'])
                    on_finished: if self.finished: pass
