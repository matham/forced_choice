#:kivy 1.8.1
#:import clock time.clock


<RootStage>:
    name: 'Root_stage'
    completion_list: self.stages
    barst: barst
    block: block
    verify: verify
    animal_stage: animal_stage
    on_started: app.exp_status = 0
    InitBarstStage:
        id: barst
        root: root
        name: 'barst'
        on_started: if self.started: app.exp_status = 1
    AnimalStage:
        name: 'rat_loop'
        repeat: -1
        id: animal_stage
        block: block
        verify: verify
        trial: trial
        animal_id: app.next_animal_btn.button.animal_id
        DigitalGateStage:
            name: 'rat_wait'
            device: app.next_animal_btn
            exit_state: True
            on_started: if self.started: app.exp_status = 2
        VerifyConfigStage:
            id: verify
            on_parent: app.verify_stage = self
            on_finished: if self.finished: animal_stage.post_verify()
        MoaStage:
            name: 'block'
            id: block
            repeat: verify.num_blocks
            MoaStage:
                name: 'trials'
                id: trial
                repeat: verify.num_trials[block.count]
                on_started: if self.started: animal_stage.pre_block()
                DigitalGateStage:
                    name: 'house_light_on'
                    device: barst.daq_out_dev
                    exit_state: True
                    state_attr: 'house_light'
                    on_started:
                        if self.started: animal_stage.pre_trial()
                        if self.started and barst.daq_out_dev: barst.daq_out_dev.set_state(high=['house_light'])
                        if self.started and barst.pin_dev: barst.pin_dev.set_state(high=['pump'])
                DigitalGateStage:
                    name: 'nose_poke_wait'
                    disabled: not animal_stage.wait_for_nose_poke
                    device: barst.daq_in_dev
                    exit_state: True
                    state_attr: 'nose_beam'
                    on_started: if self.started: app.exp_status = 3
                    on_finished: if self.finished: animal_stage.do_nose_poke()
                DigitalGateStage:
                    name: 'odor_start'
                    disabled: not animal_stage.wait_for_nose_poke
                    device: barst.odor_dev
                    exit_state: True
                    state_attr: str(verify.odor_NO[block.count])
                    on_started:
                        if self.started: barst.odor_dev.set_state(high=[verify.odor_NO[block.count], animal_stage.odor])
                DigitalGateStage:
                    name: 'wait_nose_poke_exit'
                    disabled: not animal_stage.wait_for_nose_poke
                    device: barst.daq_in_dev
                    exit_state: False
                    state_attr: 'nose_beam'
                    max_duration: verify.max_nose_poke[block.count]
                    on_finished:
                        if self.finished: barst.odor_dev.set_state(low=[verify.odor_NO[block.count], animal_stage.odor])
                        if self.finished: animal_stage.do_nose_poke_exit(self.timed_out)
                    on_started: if self.started: app.exp_status = 4
                DigitalGateStage:
                    name: 'decision_stage'
                    disabled: animal_stage.incomplete
                    device: barst.daq_in_dev
                    exit_state: True
                    state_attr: 'reward_beam_r'
                    max_duration: verify.decision_duration[block.count]
                    on_finished: if self.finished: animal_stage.do_decision(self.timed_out)
                    on_started: if self.started: app.exp_status = 5
                Delay:
                    disabled: not animal_stage.reward
                    name: 'reward_stage'
                    delay: .1
                    on_finished: if self.finished and barst.pin_dev: barst.pin_dev.set_state(low=['pump'])
                Delay:
                    name: 'iti'
                    delay: animal_stage.iti
                    on_started: if self.started and barst.daq_out_dev: barst.daq_out_dev.set_state(low=['house_light'])
                    on_started: if self.started: app.exp_status = 6
                    on_finished: if self.finished: animal_stage.post_trial()
