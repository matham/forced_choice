#:kivy 1.8.1
#:import Factory kivy.factory.Factory
#:import rgb kivy.utils.get_color_from_hex
#:import MeshLinePlot kivy.garden.graph.MeshLinePlot
#:import moas moa.base.named_moas


# the root level widget
<MainView@GridLayout>:
    padding: 20
    rows: 1
    ScrollView:
        scroll_type: ['bars']
        bar_width: 10
        GridLayout:
            size_hint: None, None
            size: self.minimum_size
            cols: 1
            spacing: [0, 50]
            ExperimentControl
                GridLayout:
                    cols: 1
                    size_hint_x: None
                    width: 100
                    padding: [5]
                    spacing: [5]
                    TextInput:
                        id: animal_id
                        height: 2 * self.line_height + 5
                        size_hint_y: None
                    Button:
                        text: 'Next'
                        on_parent: app.next_animal_btn = self
                        disabled: app.app_state != 'running'
                        animal_id: animal_id.text
            GridLayout:
                rows: 1
                size_hint: None, None
                size: self.minimum_size
                TimeLine
                    on_parent: app.timer = self
                Label:
                    size_hint_x: None
                    width: 0
                    width: max(self.texture_size[0], self.width)
                    markup: True
                    color: (.8, .4, 0, 1)
                    halign: 'center'
                    total_pass: moas.animal_stage.total_pass if moas.animal_stage else 0
                    total_fail: moas.animal_stage.total_fail if moas.animal_stage else 0
                    total_incomplete: moas.animal_stage.total_incomplete if moas.animal_stage else 0
                    text: 'PASS: [color=33CC33]{}[/color]\nFAIL: [color=ff2222]{} ({})[/color]'.format(self.total_pass, self.total_fail, self.total_incomplete)
            ScrollView:
                scroll_type: ['bars']
                bar_width: 10
                size_hint_y: None
                height: 80
                GridLayout:
                    id: prediction_container
                    size_hint: None, None
                    size: self.minimum_size
                    cols: 1
            GridLayout:
                size_hint: None, None
                size: self.minimum_size
                rows: 1
                spacing: [20, 0]
                SimDevs:
                    id: simulated_devices
                ScrollView:
                    size_hint: None, None
                    size: results_container.children[-1].width if True else results_container.width, results_container.height
                    do_scroll_y: False
                    scroll_type: ['bars']
                    bar_width: 10
                    GridLayout:
                        id: results_container
                        size_hint: None, None
                        size: self.minimum_size
                        rows: 1
                        spacing: [5, 0]
                        TrialOutcome
                        TrialOutcome
                        TrialOutcome
                        TrialOutcome
                        TrialOutcome
    Splitter:
        min_size: '10pt'
        max_size: root.width
        keep_within_parent: True
        rescale_with_parent: True
        GridLayout:
            id: graphs
            cols: 2
            padding: [20]
            spacing: [30]
            TrialGraph:
                id: ttnp
                ylabel: 'TTNP'
                ymax: 5
                on_parent: self.add_plot(MeshLinePlot(color=rgb('7dac9f')))
            TrialGraph:
                id: tinp
                ylabel: 'TINP'
                ymax: 5
                on_parent: self.add_plot(MeshLinePlot(color=rgb('dc7062')))
            TrialGraph:
                id: ttrp
                ylabel: 'TTRP'
                ymax: 6
                on_parent: self.add_plot(MeshLinePlot(color=rgb('66a8d4')))
            TrialGraph:
                id: outcome
                ylabel: 'Outcome'
                on_parent: self.add_plot(MeshLinePlot(color=rgb('e5b060')))


<TrialGraph@Graph>:
    xmax: max(1, moas.animal_stage.num_trials if moas.animal_stage else self.xmax)
    xlabel: 'Trial'
    label_options: {'color': rgb('444444'), 'bold': True}
    background_color: rgb('000000')
    tick_color: rgb('808080')
    border_color: rgb('808080')
    x_grid: True
    y_grid: True
    x_grid_label: True
    y_grid_label: True
    x_ticks_minor: 10
    x_ticks_major: 25


<MFCDisplay@GridLayout>:
    cols: 1
    value: 0.0
    width: 70
    padding: [0, 10]
    size_hint_x: None
    on_value: if not text.focus: text.text = str(self.value)
    dev_name: ''
    disabled: app.app_state == 'clear' or app.app_state == 'exception'
    Label:
        size_hint_y: None
        height: self.texture_size[1]
        padding_y: 10
        halign: 'center'
        text: root.dev_name
    TextInput:
        input_filter: 'float'
        multiline: False
        id: text
        on_text_validate: root.value = float(self.text) if self.text else 0.
        on_focus: if not self.focus: self.text = str(root.value)

<DevContainer@GridLayout>:
    size_hint: None, None
    size: self.minimum_size
    cols: 8
    spacing: [10, 0]

# holds the simulation devices
<SimDevs@GridLayout>:
    cols: 1
    size_hint: None, None
    size: self.minimum_size
    on_parent: app.simulation_devices = self
    DevContainer:
        id: odors
    Widget:
        size_hint_y: None
        height: 20
    DevContainer:
        ToggleDevice:
            id: house_light
            text: 'House light'
        ToggleDevice:
            id: nose_beam
            text: 'Nose beam'
        ToggleDevice:
            id: sound_l
            text: 'L-sound'
            background_down: 'light-blue-led-on-th.png'
            background_normal: 'light-blue-led-off-th.png'
        ToggleDevice:
            id: reward_beam_l
            text: 'L-beam'
            background_down: 'light-blue-led-on-th.png'
            background_normal: 'light-blue-led-off-th.png'
        ToggleDevice:
            id: feeder_l
            text: 'L-feeder'
            background_down: 'light-blue-led-on-th.png'
            background_normal: 'light-blue-led-off-th.png'
        ToggleDevice:
            id: sound_r
            text: 'R-sound'
            background_down: 'purple-led-on-th.png'
            background_normal: 'purple-led-off-th.png'
        ToggleDevice:
            id: reward_beam_r
            text: 'R-beam'
            background_down: 'purple-led-on-th.png'
            background_normal: 'purple-led-off-th.png'
        ToggleDevice:
            id: feeder_r
            text: 'R-feeder'
            background_down: 'purple-led-on-th.png'
            background_normal: 'purple-led-off-th.png'
        ToggleDevice:
            id: ir_leds
            text: 'IR'
        ToggleDevice:
            id: fans
            text: 'Fans'
        MFCDisplay:
            id: mfc_air
            dev_name: 'MFC air'
        MFCDisplay:
            id: mfc_a
            dev_name: 'MFC a'
        MFCDisplay:
            id: mfc_b
            dev_name: 'MFC b'
        Widget:
            size_hint_x: None
            width: 30
        SwitchIcon:
            id: simulate
            text: 'Simulate?'
            text_height: 30
            background_down: 'checkbox-checked-gray-th.png'
            background_normal: 'checkbox-unchecked-gray-th.png'
            disabled: app.app_state != 'clear'
            on_state: app.simulate = self.state == 'down'


# a formatted label of header and single line value
<ResultsLabel@Label>:
    markup: True
    size_hint: None, None
    size: self.texture_size
    title: ''
    value: ''
    color_str: ''
    line_height: 1.3
    text: '[size=13]{}[/size]\n[size=15][color={}]{}[/color][/size]'.format(self.title, self.color_str, self.value)
    strip: True
    halign: 'center'


# holds the outcome of the last few trials
<TrialOutcome>:
    size_hint: None, None
    size: self.minimum_size
    padding: [16]
    spacing: [20, 10]
    cols: 3
    canvas:
        BorderImage:
            border: (16, 16, 16, 16)
            pos: self.pos
            size: self.size
            source: 'gray-frame-th.png'
    ResultsLabel:
        title: 'Rat'
        color_str: 'CC6600'
        value: root.animal
    ResultsLabel:
        title: 'Block'
        color_str: 'CC6600'
        value: str(root.block)
    ResultsLabel:
        title: 'Trial'
        color_str: 'CC6600'
        value: '{}'.format(root.trial)
    ResultsLabel:
        title: 'TTNP'
        color_str: 'CC6600'
        value: '{:.4f}'.format(root.ttnp) if root.ttnp is not None else ''
    ResultsLabel:
        title: 'TINP'
        color_str: 'CC6600'
        value: '{:.4f}'.format(root.tinp) if root.tinp is not None else ''
    ResultsLabel:
        title: 'TTRP'
        color_str: 'CC6600'
        value: '{:.4f}'.format(root.ttrp) if root.ttrp is not None else ''
    ResultsLabel:
        title: 'Side'
        color_str: 'CC6600'
        value: str.upper(root.side) if type(root.side) is str else unicode.upper(root.side)
    ResultsLabel:
        title: 'Side went'
        color_str: 'CC6600'
        value: str.upper(root.side_went)
    ResultsLabel:
        title: 'Outcome'
        color_str: '33CC33' if root.passed else 'ff2222'
        value: ('PASS' if root.passed else ('Incomplete' if root.incomplete else 'FAIL' )) if root.passed is not None else ''
    ResultsLabel:
        title: 'Rewarded?'
        color_str: 'CC6600'
        value: str.upper(root.rewarded)
    ResultsLabel:
        title: 'ITI'
        color_str: 'CC6600'
        value: '{:.4f}'.format(root.iti) if root.iti is not None else ''


# section holds the experiment schedule for this animal
<TrialPrediction>:
    markup: True
    size_hint: None, None
    size: self.texture_size[0] + 16, self.texture_size[1] + 16
    line_height: 1.3
    outcome_color: '33CC33' if self.outcome else 'ff2222'
    color: (.8, .4, 0, 1)
    text: u'[size=15]{}: {}[/size]\n[size=15]{} : {} : {}{}[color={}]{}[/color][/size]'.format(self.trial, self.odor, self.side, self.side_went, self.side_rewarded, ' = ' if self.outcome_text else '', self.outcome_color, self.outcome_text)
    strip: True
    halign: 'center'
    canvas:
        BorderImage:
            border: (10, 10, 10, 10)
            pos: self.pos
            size: self.size
            source: 'gray-frame-th.png'

<PredictionGrid@GridLayout>:
    spacing: [5]
    padding: [5]
    size_hint: None, None
    size: self.minimum_size
    rows: 1
