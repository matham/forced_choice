#:kivy 1.8.1
#:import Factory kivy.factory.Factory
#:import rgb kivy.utils.get_color_from_hex


# the root level widget
<MainView>:
    padding: 20
    ScrollView:
        scroll_type: ['bars']
        bar_width: 10
        GridLayout:
            rows: 1
            size_hint: None, None
            size: self.minimum_size
            padding: [40]
            ExperimentView
    GridLayout:
        id: graphs
        size_hint_x: None
        width: self.minimum_width
        cols: 2
        padding: [20]
        spacing: [30]
        TrialGraph:
            id: ttnp
            ylabel: 'TTNP'
            ymax: 5
        TrialGraph:
            id: tinp
            ylabel: 'TINP'
            ymax: 5
        TrialGraph:
            id: ttrp
            ylabel: 'TTRP'
            ymax: 6
        TrialGraph:
            id: outcome
            ylabel: 'Outcome'


<TrialGraph@Graph>:
    xmax: max(1, app.base_stage.animal_stage.num_trials if app.base_stage else self.xmax)
    xlabel: 'Trial'
    size_hint_x: None
    width: 300
    label_options: {'color': rgb('444444'), 'bold': True}
    background_color: rgb('000000')
    tick_color: rgb('808080')
    border_color: rgb('808080')
    x_grid: True
    y_grid: True
    x_grid_label: True
    y_grid_label: True
    x_ticks_minor: 10
    x_ticks_major: 25


# a icon widget with a label
<LabeledIcon@Widget>
    size_hint: None, None
    size: max(self.icon_size[0], self.max_width), self.icon_size[1] + self.text_height
    text: ''
    max_width: 50
    text_height: 62
    background_down: 'green-led-on-th.png'
    background_normal: 'green-led-off-th.png'
    icon_size: 38, 38
    halign: 'center'
    canvas:
        Color:
            rgb: (1, 1, 1)
            a: .5 if self.disabled else 1
        Rectangle:
            size: root.icon_size
            pos: self.x + self.width / 2. - self.icon_size[0] / 2., self.top - self.icon_size[1]
            source: self.background_normal if self.state == 'normal' else self.background_down
    Label:
        pos: root.pos
        text: root.text
        markup: True
        size: root.width, root.text_height
        text_size: self.size
        valign: 'top'
        halign: root.halign
        strip: True
        font_size: '11dp'

# various button/switch widgets
<SwitchIcon@ToggleButtonBehavior+LabeledIcon>
<PressIcon@ButtonBehavior+LabeledIcon>

<DeviceSwitch>:
    disabled: app.app_state == 'clear' or app.app_state == 'exception' or not self.dev
    text_height: 50
    halign: 'center'

<OdorSwitch@DeviceSwitch>:
    dev: app.base_stage and app.base_stage.barst.odor_dev

<OdorDarkSwitch@OdorSwitch>
    canvas.before:
        Color:
            rgba: [0.5, 0.5, 0.5, 0.08]
        Rectangle:
            size: self.size
            pos: self.pos

# holds the simulation devices
<SimulatedDevices>:
    cols: 1
    size_hint: None, None
    size: self.minimum_size
    on_parent: app.simulation_devices = self
    daq_in_dev: app.base_stage and app.base_stage.barst.daq_in_dev
    daq_out_dev: app.base_stage and app.base_stage.barst.daq_out_dev
    sound_r_dev: app.base_stage and app.base_stage.barst.sound_r
    sound_l_dev: app.base_stage and app.base_stage.barst.sound_l
    OdorContainer:
        id: odors
        size_hint: None, None
        size: self.minimum_size
        cols: 8
        spacing: [10, 0]
    Widget:
        size_hint_y: None
        height: 20
    GridLayout:
        size_hint: None, None
        size: self.minimum_size
        cols: 8
        spacing: [10, 0]
        DeviceSwitch:
            id: house_light
            text: 'House light'
            dev: root.daq_out_dev
            channel: 'house_light'
        DeviceSwitch:
            id: nose_beam
            text: 'Nose beam'
            dev: root.daq_in_dev
            channel: 'nose_beam'
            input: True
        DeviceSwitch:
            id: sound_l
            text: 'L-sound'
            dev: root.sound_l_dev
            channel: 'state'
            virtual: True
            multichannel: False
            background_down: 'light-blue-led-on-th.png'
            background_normal: 'light-blue-led-off-th.png'
        DeviceSwitch:
            id: reward_beam_l
            text: 'L-beam'
            dev: root.daq_in_dev
            channel: 'reward_beam_l'
            input: True
            background_down: 'light-blue-led-on-th.png'
            background_normal: 'light-blue-led-off-th.png'
        DeviceSwitch:
            id: feeder_l
            text: 'L-feeder'
            dev: root.daq_out_dev
            channel: 'feeder_l'
            background_down: 'light-blue-led-on-th.png'
            background_normal: 'light-blue-led-off-th.png'
        DeviceSwitch:
            id: sound_r
            text: 'R-sound'
            dev: root.sound_r_dev
            channel: 'state'
            virtual: True
            multichannel: False
            background_down: 'purple-led-on-th.png'
            background_normal: 'purple-led-off-th.png'
        DeviceSwitch:
            id: reward_beam_r
            text: 'R-beam'
            dev: root.daq_in_dev
            channel: 'reward_beam_r'
            input: True
            background_down: 'purple-led-on-th.png'
            background_normal: 'purple-led-off-th.png'
        DeviceSwitch:
            id: feeder_r
            text: 'R-feeder'
            dev: root.daq_out_dev
            channel: 'feeder_r'
            background_down: 'purple-led-on-th.png'
            background_normal: 'purple-led-off-th.png'
        DeviceSwitch:
            id: ir_leds
            text: 'IR'
            dev: root.daq_out_dev
            channel: 'ir_leds'
        DeviceSwitch:
            id: fans
            text: 'Fans'
            dev: root.daq_out_dev
            channel: 'fans'
        Widget:
            size_hint: None, None
            size: 30, simulate.height
        SwitchIcon:
            id: simulate
            text: 'Simulate?'
            text_height: 30
            background_down: 'checkbox-checked-gray-th.png'
            background_normal: 'checkbox-unchecked-gray-th.png'
            disabled: app.app_state != 'clear'
            on_state: app.simulate = self.state == 'down'


# a formatted label of header and single line value
<ResultsLabel@Label>:
    markup: True
    size_hint: None, None
    size: self.texture_size
    title: ''
    value: ''
    color_str: ''
    line_height: 1.3
    text: '[size=13]{}[/size]\n[size=15][color={}]{}[/color][/size]'.format(self.title, self.color_str, self.value)
    strip: True
    halign: 'center'


# holds the outcome of the last few trials
<TrialOutcome>:
    size_hint: None, None
    size: self.minimum_size
    padding: [16]
    spacing: [20, 10]
    cols: 3
    canvas:
        BorderImage:
            border: (16, 16, 16, 16)
            pos: self.pos
            size: self.size
            source: 'gray-frame-th.png'
    ResultsLabel:
        title: 'Rat'
        color_str: 'CC6600'
        value: root.animal
    ResultsLabel:
        title: 'Block'
        color_str: 'CC6600'
        value: str(root.block)
    ResultsLabel:
        title: 'Trial'
        color_str: 'CC6600'
        value: '{}'.format(root.trial)
    ResultsLabel:
        title: 'TTNP'
        color_str: 'CC6600'
        value: '{:.4f}'.format(root.ttnp) if root.ttnp is not None else ''
    ResultsLabel:
        title: 'TINP'
        color_str: 'CC6600'
        value: '{:.4f}'.format(root.tinp) if root.tinp is not None else ''
    ResultsLabel:
        title: 'TTRP'
        color_str: 'CC6600'
        value: '{:.4f}'.format(root.ttrp) if root.ttrp is not None else ''
    ResultsLabel:
        title: 'Side'
        color_str: 'CC6600'
        value: str.upper(root.side) if type(root.side) is str else unicode.upper(root.side)
    ResultsLabel:
        title: 'Side went'
        color_str: 'CC6600'
        value: str.upper(root.side_went)
    ResultsLabel:
        title: 'Outcome'
        color_str: '33CC33' if root.passed else 'ff2222'
        value: ('PASS' if root.passed else ('Incomplete' if root.incomplete else 'FAIL' )) if root.passed is not None else ''
    ResultsLabel:
        title: 'Rewarded?'
        color_str: 'CC6600'
        value: str.upper(root.rewarded)
    ResultsLabel:
        title: 'ITI'
        color_str: 'CC6600'
        value: '{:.4f}'.format(root.iti) if root.iti is not None else ''

<SumulatedAndResults@GridLayout>:
    size_hint: None, None
    size: self.minimum_size
    rows: 1
    spacing: [20, 0]
    SimulatedDevices:
        id: simulated_devices
    ScrollView:
        size_hint: None, None
        size: results_container.children[-1].width if True else results_container.width, results_container.height
        do_scroll_y: False
        scroll_type: ['bars']
        bar_width: 10
        GridLayout:
            id: results_container
            on_parent: app.outcome_container = self
            size_hint: None, None
            size: self.minimum_size
            rows: 1
            spacing: [5, 0]
            TrialOutcome
            TrialOutcome
            TrialOutcome
            TrialOutcome
            TrialOutcome


# section holds the experiment schedule for this animal
<TrialPrediction>:
    markup: True
    size_hint: None, None
    size: self.texture_size[0] + 16, self.texture_size[1] + 16
    line_height: 1.3
    outcome_color: '33CC33' if self.outcome else 'ff2222'
    color: (.8, .4, 0, 1)
    text: u'[size=15]{}: {}[/size]\n[size=15]{} : {} : {}{}[color={}]{}[/color][/size]'.format(self.trial, self.odor, self.side, self.side_went, self.side_rewarded, ' = ' if self.outcome_text else '', self.outcome_color, self.outcome_text)
    strip: True
    halign: 'center'
    canvas:
        BorderImage:
            border: (10, 10, 10, 10)
            pos: self.pos
            size: self.size
            source: 'gray-frame-th.png'

<PredictionGrid@GridLayout>:
    spacing: [5]
    padding: [5]
    size_hint: None, None
    size: self.minimum_size
    rows: 1


# the experiment status
<ExperimentStatus@Label>:
    text_size: self.size
    valign: 'middle'
    halign: 'center'
    color: (.8, .4, 0, 1)
    index: len(self.parent.children) - self.parent.children.index(self.__self__)
    disabled: app.exp_status < self.index

<ExperimentStatusText@BoxLayout>:
    padding: [5]
    spacing: 5
    ExperimentStatus:
        text: 'Initializing'
    ExperimentStatus:
        text: 'Next subject'
    ExperimentStatus:
        text: 'Nose poke'
    ExperimentStatus:
        text: 'Nose exit'
    ExperimentStatus:
        text: 'Decision'
    ExperimentStatus:
        text: 'ITI'
    Label:
        size_hint_x: None
        width: self.texture_size[0]
        markup: True
        color: (.8, .4, 0, 1)
        halign: 'center'
        total_pass: app.base_stage.animal_stage.total_pass if app.base_stage else 0
        total_fail: app.base_stage.animal_stage.total_fail if app.base_stage else 0
        total_incomplete: app.base_stage.animal_stage.total_incomplete if app.base_stage else 0
        text: 'PASS: [color=33CC33]{}[/color]\nFAIL: [color=ff2222]{} ({})[/color]'.format(self.total_pass, self.total_fail, self.total_incomplete)


# contains the experiment schedule and status
<ExperimentView@GridLayout>:
    size_hint: None, None
    size: self.minimum_size
    cols: 1
    spacing: [0, 50]
    ExperimentControl
    ExperimentStatusText
    ScrollView:
        scroll_type: ['bars']
        bar_width: 10
        size_hint_y: None
        height: 80
        GridLayout:
            on_parent: app.prediction_container = self
            size_hint: None, None
            size: self.minimum_size
            cols: 1
    SumulatedAndResults


# controls for starting/stopping the experiment
<StartingExperiment@GridLayout>:
    cols: 1
    size_hint: None, None
    height: self.minimum_height
    width: 200
    padding: [5]
    spacing: [5]
    TextInput:
        height: 2 * self.line_height + 5
        size_hint_y: None
        text: app.exp_config_path
        on_text: app.exp_config_path = self.text
    GridLayout:
        rows: 1
        size_hint_y: None
        height: 50
        spacing: [5]
        Button:
            text: 'Start'
            on_press: app.start_stage()
            disabled: app.app_state != 'clear'
        Button:
            text: 'Recover'
            on_press: app.start_stage(True)
            disabled: app.app_state != 'clear'

<ExperimentControl@GridLayout>:
    size_hint_y: None
    height: self.minimum_height
    rows: 1
    spacing: [20, 0]
    StartingExperiment
    Widget:
        size_hint: None, None
        size: switch.size
        SwitchIcon:
            pos: self.parent.pos
            id: switch
            size_hint: None, None
            text: 'Pause' if self.state == 'normal' else 'Continue'
            max_width: 0
            text_height: 30
            background_down: 'play.png'
            background_normal: 'pause.png'
            icon_size: 48, 48
            on_press:
                app.base_stage is not None and (app.base_stage.unpause() if self.state == 'normal' else app.base_stage.pause())
                app.app_state =  'running' if self.state == 'normal' else 'paused'
            disabled: app.app_state != 'running' and app.app_state != 'paused'
    Widget:
        size_hint: None, None
        size: press.size
        PressIcon:
            pos: self.parent.pos
            id: press
            text: 'Stop'
            max_width: 0
            text_height: 30
            background_down: 'stop_0.png'
            background_normal: 'stop_1.png'
            icon_size: 48, 48
            on_press: app.base_stage and app.base_stage.stop()
            disabled: app.app_state != 'running'
    GridLayout:
        cols: 1
        size_hint_x: None
        width: 100
        padding: [5]
        spacing: [5]
        TextInput:
            id: animal_id
            height: 2 * self.line_height + 5
            size_hint_y: None
        Button:
            text: 'Next'
            on_parent: app.next_animal_btn = Factory.get('ButtonChannel')(button=self)
            disabled: app.app_state != 'running'
            animal_id: animal_id.text
    Label:
        size_hint_x: None
        width: self.height
        on_touch_down: app.exception_value and self.collide_point(*args[1].pos) and (app.popup_anim.cancel(self) or setattr(self, 'warn_alpha', int(bool(app.exception_value))) or app.err_popup.open())
        warn_alpha: 0.
        warn_text: app.exception_value
        on_warn_text:
            if self.warn_text and app.popup_anim: app.popup_anim.start(self)
            else: setattr(self, 'warn_alpha', 0)
        canvas:
            Color:
                rgb: 1, 1, 1
                a: self.warn_alpha
            Rectangle:
                pos: self.pos
                size: self.size
                source: 'Remove_1.png'


<ErrorPopup@Popup>:
    title: 'Message'
    size_hint: None, None
    height: min(self.parent.height if self.parent else 0, 600)
    width: min(self.parent.width if self.parent else 0, 800)
    ScrollView:
        scroll_type: ['bars']
        bar_width: 10
        Label:
            size_hint_y: None
            height: self.texture_size[1]
            text_size: self.width, None
            text: app.exception_value
