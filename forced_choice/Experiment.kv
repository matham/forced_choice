#:kivy 1.8.1


<RootStage@MoaStage>:
    on_finished: if self.finished: barst.stop_devices()
    on_finished: if self.finished: app.timer.set_active_slice('Done')
    InitBarstStage:
        id: barst
        name: 'barst'
        on_started: if self.started: app.timer.set_active_slice('Init')
    AnimalStage:
        name: 'animal_stage'
        repeat: -1
        id: animal_stage
        animal_id: app.next_animal_btn.animal_id
        on_started: if self.started: animal_stage.initialize_box()
        DigitalGateStage:
            name: 'rat_wait'
            device: barst.next_animal_dev
            exit_state: True
            on_started: if self.started: app.timer.set_active_slice('Ready')
        VerifyConfigStage:
            id: verify
            name: 'verify'
            on_finished: if self.finished: animal_stage.post_verify()
        MoaStage:
            name: 'block'
            id: block
            repeat: verify.num_blocks
            on_started: app.timer.update_slice_attrs('NP', text='NP ({}.{})'.format(self.count, trial.count))
            on_count: app.timer.update_slice_attrs('NP', text='NP ({}.{})'.format(self.count, trial.count))
            MoaStage:
                name: 'trial'
                id: trial
                repeat: verify.num_trials[block.count]
                on_started: if self.started: animal_stage.pre_block()
                on_count: app.timer.update_slice_attrs('NP', text='NP ({}.{})'.format(block.count, self.count))
                on_started: app.timer.update_slice_attrs('NP', duration=verify.max_nose_poke[self.count])
                on_started: app.timer.update_slice_attrs('Wait HP', duration=verify.max_decision_duration[self.count])
                Delay:
                    name: 'odor_mix'
                    delay: verify.mix_dur
                    disabled: not verify.wait_for_nose_poke[block.count]
                    on_started: if self.started: animal_stage.start_mixing()
                DigitalGateStage:
                    name: 'house_light_on'
                    device: barst.daq_out_dev
                    exit_state: True
                    state_attr: 'house_light'
                    on_started: if self.started: barst.daq_out_dev.set_state(high=['house_light'])
                    on_finished: if self.finished: animal_stage.pre_trial()
                DigitalGateStage:
                    name: 'nose_poke_wait'
                    disabled: not verify.wait_for_nose_poke[block.count]
                    device: barst.daq_in_dev
                    exit_state: True
                    state_attr: 'nose_beam'
                    on_finished: if self.finished: animal_stage.do_nose_poke()
                    on_started: if self.started: app.timer.set_active_slice('Wait NP')
                DigitalGateStage:
                    name: 'wait_nose_poke_exit'
                    disabled: not verify.wait_for_nose_poke[block.count]
                    device: barst.daq_in_dev
                    exit_state: False
                    state_attr: 'nose_beam'
                    max_duration: verify.max_nose_poke[block.count]
                    on_finished: if self.finished: animal_stage.do_nose_poke_exit(self.timed_out)
                    completion_list: [self]
                    on_started: if self.started: app.timer.set_active_slice('NP')
                    Delay:
                        name: 'odor_delay'
                        delay: verify.odor_delay[block.count]
                        on_finished: if self.finished: animal_stage.do_odor_release()
                    Delay:
                        id: min_nose_poke
                        delay: verify.min_nose_poke[block.count]
                        disabled: not verify.min_nose_poke[block.count]
                    Delay:
                        delay_type: 'random'
                        max: verify.sound_cue_delay[block.count]
                        disabled: not verify.sound_cue_delay[block.count]
                    Delay:
                        delay: verify.sound_dur[block.count]
                        disabled: animal_stage.sound is None
                        on_started: if self.started: animal_stage.sound.set_state(True)
                        on_finished: if self.finished: animal_stage.sound.set_state(False)
                MoaStage:
                    name: 'decision_stage'
                    disabled: animal_stage.reward_side is False
                    max_duration: verify.max_decision_duration[block.count]
                    on_finished: if self.finished: animal_stage.do_decision(not reward_entry_r.stopped, not reward_entry_l.stopped, self.timed_out)
                    completion_type: 'any'
                    order: 'parallel'
                    completion_list: [self, reward_entry_r, reward_entry_l]
                    on_started: if self.started: app.timer.set_active_slice('Wait HP')
                    DigitalGateStage
                        id: reward_entry_r
                        device: barst.daq_in_dev
                        exit_state: True
                        state_attr: 'reward_beam_r'
                    DigitalGateStage
                        id: reward_entry_l
                        device: barst.daq_in_dev
                        exit_state: True
                        state_attr: 'reward_beam_l'
                        on_started: if self.started: 10
                MoaStage:
                    repeat: verify.num_pellets[block.count]
                    disabled: animal_stage.reward_side is False
                    name: 'reward_stage'
                    id: reward_stage
                    on_started: if self.started: app.timer.set_active_slice('Reward')
                    Delay:
                        disabled: not reward_stage.count
                        delay: 0.9
                    DigitalGateStage:
                        device: barst.daq_out_dev
                        exit_state: True
                        state_attr: '' if not animal_stage.reward_side else animal_stage.reward_side
                        on_started: if self.started: barst.daq_out_dev.set_state(high=[animal_stage.reward_side])
                    Delay:
                        delay: 0.01
                    DigitalGateStage:
                        device: barst.daq_out_dev
                        exit_state: False
                        state_attr: '' if not animal_stage.reward_side else animal_stage.reward_side
                        on_started: if self.started: barst.daq_out_dev.set_state(low=[animal_stage.reward_side])
                Delay:
                    name: 'iti'
                    on_started: if self.started: app.timer.update_slice_attrs('ITI', duration=animal_stage.iti)
                    delay: max(animal_stage.iti - verify.mix_dur, 0)
                    on_started: if self.started: barst.daq_out_dev.set_state(low=['house_light'])
                    on_finished: if self.finished: animal_stage.post_trial()
                    on_started: if self.started: app.timer.set_active_slice('ITI')
