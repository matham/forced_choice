#:kivy 1.8.1
#:import knspace kivy.uix.behaviors.knspace.knspace
#:import Factory kivy.factory.Factory


<RootStage>:
    knsname: 'exp_root'
    completion_list: self.stages + [self]
    on_stage_end:
        knspace.time_line.set_active_slice('Done')
        app.clean_up_root_stage()
    MoaStage:
        knsname: 'exp_dev_init'
        on_stage_start:
            knspace.time_line.set_active_slice('Init')
            root.init_devices()
    AnimalStage:
        knsname: 'exp_animal_stage'
        id: animal_stage
        repeat: -1  # foreves
        on_stage_start: self.initialize_box()
        on_trial_start: knspace.time_line.set_active_slice('Ready')
        DigitalGateStage:
            knsname: 'exp_animal_wait'
            device: Factory.ButtonChannel(button=knspace.gui_next_animal)
            exit_state: True
            on_stage_end: animal_stage.initialize_animal()
        MoaStage:
            knsname: 'exp_block'
            repeat: animal_stage.config.num_blocks
            on_trial_start: animal_stage.pre_block()
            restore_properties: ['count']
            MoaStage:
                knsname: 'exp_trial'
                repeat: animal_stage.config.num_trials[animal_stage.block]
                on_trial_start: animal_stage.init_trial(knspace.exp_block, knspace.exp_trial)
                restore_properties: ['count']
                Delay:
                    delay: animal_stage.config.mix_dur
                    id: mix_stage
                    disabled: not animal_stage.config.wait_for_nose_poke[animal_stage.block]
                DigitalGateStage:
                    device: knspace.daqout
                    exit_state: True
                    state_prop: 'house_light'
                    on_stage_start: knspace.daqout.set_state(high=['house_light'])
                    on_stage_end: animal_stage.pre_trial()
                DigitalGateStage:
                    disabled: not animal_stage.config.wait_for_nose_poke[animal_stage.block]
                    device: knspace.daqin
                    exit_state: True
                    state_prop: 'nose_beam'
                    on_stage_start: knspace.time_line.set_active_slice('Wait NP')
                    on_stage_end: animal_stage.do_nose_poke()
                DigitalGateStage:
                    disabled: not animal_stage.config.wait_for_nose_poke[animal_stage.block]
                    device: knspace.daqin
                    exit_state: False
                    state_prop: 'nose_beam'
                    max_duration: animal_stage.config.max_nose_poke[animal_stage.block]
                    completion_list: [self]
                    on_stage_start: knspace.time_line.set_active_slice('NP')
                    on_stage_end: animal_stage.do_nose_poke_exit(self.timed_out)
                    Delay:
                        delay: animal_stage.config.odor_delay[animal_stage.block]
                        on_stage_end: animal_stage.do_odor_release()
                    Delay:
                        delay: animal_stage.config.min_nose_poke[animal_stage.block]
                        disabled: not animal_stage.config.min_nose_poke[animal_stage.block]
                    Delay:
                        delay_type: 'random'
                        max: animal_stage.config.sound_cue_delay[animal_stage.block]
                        disabled: sound_delay.disabled or not animal_stage.config.sound_cue_delay[animal_stage.block]
                    Delay:
                        id: sound_delay
                        delay: animal_stage.config.sound_dur[animal_stage.block]
                        disabled: not animal_stage.config.sound_dur[animal_stage.block] or not animal_stage.sound
                        on_stage_start: animal_stage.sound.set_state(True)
                        on_stage_end: animal_stage.sound.set_state(False)
                MoaStage:
                    disabled: animal_stage.reward_side is False
                    max_duration: animal_stage.config.max_decision_duration[animal_stage.block]
                    completion_type: 'any'
                    order: 'parallel'
                    on_stage_start: knspace.time_line.set_active_slice('Wait HP')
                    on_stage_end: animal_stage.do_decision(not reward_entry_r.stopped, not reward_entry_l.stopped, self.timed_out)
                    DigitalGateStage
                        id: reward_entry_r
                        device: knspace.daqin
                        exit_state: True
                        state_prop: 'reward_beam_r'
                    DigitalGateStage
                        id: reward_entry_l
                        device: knspace.daqin
                        exit_state: True
                        state_prop: 'reward_beam_l'
                MoaStage:
                    id: reward_stage
                    repeat: animal_stage.config.num_pellets[animal_stage.block]
                    disabled: animal_stage.reward_side is False
                    on_stage_start: knspace.time_line.set_active_slice('Reward')
                    Delay:
                        disabled: not reward_stage.count
                        delay: 0.9
                    DigitalGateStage:
                        device: knspace.daqout
                        exit_state: True
                        state_prop: animal_stage.reward_side or ''
                        on_stage_start: knspace.daqout.set_state(high=[animal_stage.reward_side])
                    Delay:
                        delay: 0.01
                    DigitalGateStage:
                        device: knspace.daqout
                        exit_state: False
                        state_prop: animal_stage.reward_side or ''
                        on_stage_start: knspace.daqout.set_state(low=[animal_stage.reward_side])
                Delay:
                    delay: max(animal_stage.iti - animal_stage.config.mix_dur, 0) if not mix_stage.disabled else animal_stage.iti
                    on_stage_start:
                        knspace.time_line.update_slice_attrs('ITI', duration=animal_stage.iti)
                        knspace.time_line.set_active_slice('ITI')
                        knspace.daqout.set_state(low=['house_light'])
                    on_stage_end: animal_stage.post_trial()
